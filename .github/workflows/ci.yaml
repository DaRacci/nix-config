name: Build and test flake outputs

on:
  push:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  discover-users:
    name: Discover Users
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.get-users.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Get users from flake
        id: get-users
        run: |
          ALL_USERS=$(nix eval --json ".#homeConfigurations" --apply builtins.attrNames)
          echo "All users from flake: $ALL_USERS"
          {
            echo 'matrix<<EOF'
            echo "$ALL_USERS" | jq -c -s '.[] | map({user: .})' || echo "[]"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  discover-hosts:
    name: Discover Hosts
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.get-hosts.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Get hosts from flake
        id: get-hosts
        run: |
          ALL_HOSTS=$(nix flake show --no-pure-eval --json | jq -r '.nixosConfigurations | keys | .[]' | jq -R . | jq -s . || echo "[]")
          echo "All hosts from flake: $ALL_HOSTS"
          {
            echo 'matrix<<EOF'
            echo "$ALL_HOSTS"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  enrich-users:
    runs-on: self-hosted
    needs: discover-users
    if: ${{ needs.discover-users.outputs.matrix != '[]' }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.discover-users.outputs.matrix) }}
      # If one fails theres probably a larger issue
      fail-fast: true
    name: Enrich user ${{ matrix.user }}
    steps:
      - uses: actions/checkout@v4
      - name: Get User Imports
        run: |
          USER_IMPORTS=$(./utils/get-imports.nu "HOME" "${{ matrix.user }}" | jq -c .)
          echo "$USER_IMPORTS" > imports.json
      - name: Upload Imports Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.user }}-user-imports
          path: imports.json
          if-no-files-found: error

  enrich-hosts:
    runs-on: self-hosted
    needs: [discover-hosts, enrich-users]
    if: ${{ needs.discover-hosts.outputs.matrix != '[]' }}
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-hosts.outputs.matrix) }}
      # If one fails theres probably a larger issue
      fail-fast: true
    name: Enrich host ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Host Imports
        id: get-imports
        run: |
          HOST_IMPORTS=$(./utils/get-imports.nu "OS" "${{ matrix.host }}" | jq -c .)
          {
            echo 'host-imports<<EOF'
            echo "$HOST_IMPORTS"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get Host Users
        id: get-users
        run: |
          HOST_USERS=$(nix eval --json .#nixosConfigurations.${{ matrix.host }}.config.home-manager.users --apply builtins.attrNames 2>/dev/null | jq -c . || echo "[]")
          echo "Host users: $HOST_USERS"
          {
            echo 'host-users<<EOF'
            echo "$HOST_USERS"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Download User Imports Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-user-imports"

      - name: Aggregate Imports
        run: |
          HOST_IMPORTS='${{ steps.get-imports.outputs.host-imports }}'
          HOST_USERS='${{ steps.get-users.outputs.host-users }}'

          IMPORTS=$(echo "$HOST_IMPORTS" | jq -c . || echo "[]")

          for user in $(echo "$HOST_USERS" | jq -r '.[]' 2>/dev/null || echo ""); do
            if [[ -z "$user" ]]; then
              continue
            fi

            user_imports_file="$user-user-imports/imports.json"
            if [[ -f "$user_imports_file" ]]; then
              user_imports=$(jq -c . "$user_imports_file" || echo "[]")
              IMPORTS=$(jq -s '.[0] + .[1]' <(echo "$IMPORTS") <(echo "$user_imports"))
            else
              echo "No imports found for user $user"
            fi
          done

          echo "Aggregated imports for host ${{ matrix.host }}: $IMPORTS"
          jq -n \
            --arg host "${{ matrix.host }}" \
            --arg system "x86_64-linux" \
            --argjson imports "$IMPORTS" \
            '{host: $host, system: $system, imports: $imports}' > "details.json"

      - name: Upload Host Details Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.host }}-host-details"
          path: "details.json"
          if-no-files-found: error

  determine-affected:
    runs-on: self-hosted
    needs: [enrich-hosts]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Host Details Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-host-details"
      - name: Aggregate Host Details
        id: hosts
        run: |
          HOST_DETAILS=$(find . -wholename '*-host-details/details.json' -exec cat {} + | jq -c -s 'map({key: .host, value: .}) | from_entries' || echo "{}")
          echo "Aggregated host details: $HOST_DETAILS"
          {
            echo 'details<<EOF'
            echo "$HOST_DETAILS"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get Changes
        id: changes
        run: |
          if [[ -n "${{ github.event.before }}" ]]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -v '^D' || true)
          else
            # If github.event.before is not available (e.g., on workflow_dispatch)
            # Get all files in the repo as changed
            CHANGED_FILES=$(find . -type f | grep -v "^./.git" || true)
          fi

          # Strip leading './' from file paths
          CHANGED_FILES="${CHANGED_FILES#./}"
          echo "Changed files: $CHANGED_FILES"

          {
            echo 'files<<EOF'
            echo "$CHANGED_FILES" | jq -R . | jq -s -c .
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Determine affected hosts
        id: set-matrix
        run: |
          HOST_DETAILS='${{ steps.hosts.outputs.details }}'
          CHANGED_FILES='${{ steps.changes.outputs.files }}'
          GLOBAL_FILES=(
            "flake.nix"
            "flake.lock"
            "lib/"
            "overlays/"
            "pkgs/"
          )

          for pattern in "${GLOBAL_FILES[@]}"; do
            if echo "$CHANGED_FILES" | jq -e --arg pattern "$pattern" 'map(select(startswith($pattern))) | length > 0' > /dev/null; then
              echo "Found changes in global files: $pattern. All hosts will be rebuilt."
              BUILD_HOSTS=$(echo "$HOST_DETAILS" | jq 'keys' 2>/dev/null || echo "[]")
              break
            fi
          done

          # If no global changes, filter hosts based on changed files
          if [[ -z "$BUILD_HOSTS" ]]; then
            echo "Filtering hosts based on changed files."
            BUILD_HOSTS=$(jq --argjson changed "$CHANGED_FILES" '
              . as $hosts |
              to_entries | map(select(.value.imports |
                any(. as $imp | ($changed[] | index($imp)))))
              | map(.key)
            ' <<< "$HOST_DETAILS" 2>/dev/null || echo "[]")
          fi

          # Special Rules
          EXTRA_SPACE='["nixmi", "winix"]'
          NO_BUILD='["nixmi", "winix"]'

          echo "Hosts to be rebuilt: $BUILD_HOSTS"
          {
            echo 'matrix<<EOF'
            jq \
              --argjson rule_extra_space "$EXTRA_SPACE" \
              --argjson rule_no_build "$NO_BUILD" \
              -e '
                . | map({
                  host: .,
                  system: "x86_64-linux",
                  extraSpace: IN($rule_extra_space[]),
                  noBuild: IN($rule_no_build[])
                })' <<< "$BUILD_HOSTS" 2>/dev/null || echo "[]"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  cleanup:
    runs-on: self-hosted
    needs: [determine-affected]
    if: ${{ always() }}
    steps:
      - uses: geekyeggo/delete-artifact@v5
        if: ${{ always() }}
        with:
          name: "*-host-details.json"

      - uses: geekyeggo/delete-artifact@v5
        if: ${{ always() }}
        with:
          name: "*-user-imports.json"

  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Nix flake Nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@main

  build:
    needs: determine-affected
    if: needs.determine-affected.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.host }}-${{ matrix.system }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.determine-affected.outputs.matrix) }}

    name: Build ${{ matrix.host }} on ${{ matrix.system }}

    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space
        if: ${{ matrix.extraSpace && !env.ACT }}
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: true
          tool-cache: true

      - name: Create Dir for Mounting more Disk Space ‚ùÑ
        if: ${{ matrix.extraSpace && !env.ACT }}
        run: sudo mkdir /nix

      - name: Maximize Disk Space
        if: ${{ matrix.extraSpace && !env.ACT }}
        uses: easimon/maximize-build-space@v10
        with:
          build-mount-path: /nix
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          temp-reserve-mb: 100
          swap-size-mb: 4096
          root-reserve-mb: 1024

      - name: Ensure correct permissions for /nix
        if: ${{ matrix.extraSpace && !env.ACT }}
        run: sudo chown -R root:root /nix

      - uses: ./.github/actions/setup-nix
        with:
          arch: ${{ matrix.system }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          ATTIC_ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Evaluate ${{ matrix.host }}
        env:
          _system: ${{ matrix.system }}
        run: nix eval --accept-flake-config .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel

      - name: Build ${{ matrix.host }}
        if: ${{ !matrix.noBuild }}
        env:
          _system: ${{ matrix.system }}
        run: nix build --accept-flake-config .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel

  test:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.command }}-${{ matrix.system }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - command: fmt -L -- --ci
            system: x86_64-linux
          - command: flake check --no-pure-eval --allow-import-from-derivation
            system: x86_64-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-nix
        with:
          arch: ${{ matrix.system }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          ATTIC_ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Run ${{ matrix.command }} on ${{ matrix.system }}
        env:
          _system: ${{ matrix.system }}
        run: nix --accept-flake-config ${{ matrix.command }}
