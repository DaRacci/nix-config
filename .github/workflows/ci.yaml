name: Build and test flake outputs

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      branch:
        description: Branch name to build on
        default: ""
        required: false
        type: string

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Check Nix flake Nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@main

  build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.host }}-${{ matrix.system }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      # TODO - Use a step to determine the hosts dynamically from the flake
      matrix:
        include:
          - host: nixmi
            system: x86_64-linux
            extraSpace: true
          - host: winix
            system: x86_64-linux
          - host: nixai
            system: x86_64-linux
          - host: nixarr
            system: x86_64-linux
          - host: nixcloud
            system: x86_64-linux
          - host: nixdev
            system: x86_64-linux
          - host: nixio
            system: x86_64-linux
          - host: nixmon
            system: x86_64-linux
          - host: nixserv
            system: x86_64-linux

    name: ${{ matrix.host }} on ${{ matrix.system }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Free Disk Space
        if: ${{ matrix.extraSpace == true && !env.ACT }}
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: true
          tool-cache: true
      - name: Create Dir for Mounting more Disk Space ‚ùÑ
        if: ${{ matrix.extraSpace == true && !env.ACT }}
        run: sudo mkdir /nix
      - name: Maximize Disk Space
        if: ${{ matrix.extraSpace == true && !env.ACT }}
        uses: easimon/maximize-build-space@v10
        with:
          build-mount-path: /nix
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
          temp-reserve-mb: 100
          swap-size-mb: 4096
          root-reserve-mb: 1024
      - name: Ensure correct permissions for /nix
        if: ${{ matrix.extraSpace == true && !env.ACT }}
        run: sudo chown -R root:root /nix

      - uses: ./.github/actions/setup-nix
        with:
          arch: ${{ matrix.system }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          ATTIC_ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Evaluate ${{ matrix.host }}
        env:
          _system: ${{ matrix.system }}
        run: nix eval --impure --accept-flake-config .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel

      - name: Build ${{ matrix.host }}
        # if: matrix.noBuild != true
        env:
          _system: ${{ matrix.system }}
        run: nix build --impure --accept-flake-config .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel

  test:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.command }}-${{ matrix.system }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - command: fmt -L -- --ci
            system: x86_64-linux
          - command: flake check --impure --allow-import-from-derivation
            system: x86_64-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - uses: ./.github/actions/setup-nix
        with:
          arch: ${{ matrix.system }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          ATTIC_ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Run ${{ matrix.command }} on ${{ matrix.system }}
        env:
          _system: ${{ matrix.system }}
        run: nix --accept-flake-config ${{ matrix.command }}
