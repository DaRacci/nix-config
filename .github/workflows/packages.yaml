name: Build packages

on:
  push:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  discover-packages:
    name: Discover Packages
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.get-packages.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Get packages from flake
        id: get-packages
        run: |
          FLAKE_JSON=$(nix flake show --no-pure-eval --json)
          ARCHS=$(echo "$FLAKE_JSON" | jq -r '.packages | keys[]')
          INCLUDE_JSON='[]'
          for ARCH in $ARCHS; do
            PKGS=$(echo "$FLAKE_JSON" | jq -r --arg arch "$ARCH" '.packages[$arch] | keys[] | select(startswith("devenv-") | not)')
            for PKG in $PKGS; do
              BROKEN=$(nix eval --json --system "$ARCH" ".#${PKG}.meta.broken" 2>/dev/null)
              if [ "$BROKEN" != "true" ]; then
                INCLUDE_JSON=$(echo "$INCLUDE_JSON" | jq --arg pkg "$PKG" --arg arch "$ARCH" '. + [{package:$pkg, arch:$arch}]')
              else
                echo "Skipping broken package $PKG on $ARCH"
              fi
            done
          done
          if [ "$(echo "$INCLUDE_JSON" | jq 'length')" -eq 0 ]; then
            MATRIX_JSON='[]'
          else
            MATRIX_JSON=$(jq -n --argjson include "$INCLUDE_JSON" '{include:$include}')
          fi
          echo "Calculated matrix: $MATRIX_JSON"
          {
            echo 'matrix<<EOF'
            echo "$MATRIX_JSON"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  build-packages:
    needs: discover-packages
    if: ${{ needs.discover-packages.outputs.matrix != '[]' }}
    strategy:
      matrix: ${{ fromJson(needs.discover-packages.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.arch == 'aarch64-linux' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    name: Build package ${{ matrix.package }} on ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-nix
        with:
          arch: ${{ matrix.arch }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          ATTIC_ENDPOINT: ${{ secrets.ATTIC_ENDPOINT }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Build Package
        run: nix build .#${{ matrix.package }} -L --show-trace --no-link --print-out-paths
