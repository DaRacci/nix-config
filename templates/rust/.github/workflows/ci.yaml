name: Continuous Integration

on: [ push, pull_request ]

jobs:
  clippy-checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust Toolchain and Cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.4.4
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Cargo fmt
        run: |
          cargo fmt --all -- --check

      - name: Cargo clippy
        run: |
          cargo clippy --workspace -- -D warnings

  tests:
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - target: windows
            os: windows-latest
            extra: ".exe"
          - target: linux
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
    
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: workflow/nix-shell-action@v3
        with:
          flakes: .#default
          script: |
            # Runs hello from a local flake.nix
            hello
            # Uses docker from the nixpkgs registry (see https://raw.githubusercontent.com/NixOS/flake-registry/master/flake-registry.json)
            command -v docker

name: Continuous Integration

on:
  push:
    branches: [master]
    paths: ["**/src/**", ".github/workflows/ci.yaml"]

jobs:
  fmt-clippy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust Toolchain and Cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.4.4
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Cargo fmt
        run: |
          cargo fmt --all -- --check

      - name: Cargo clippy
        run: |
          cargo clippy --workspace -- -D warnings

  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust Toolchain and Cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.4.4
        with:
          toolchain: nightly

      - name: Run tests
        run: |
          cargo test --workspace --profile ci

  artifact:
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - target: windows
            os: windows-latest
            extra: ".exe"
          - target: linux
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust Toolchain and Cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.4.4
        with:
          toolchain: nightly

      - name: Run
        run: |
          cargo build --workspace --release

      - uses: actions/upload-artifact@v4.3.1
        with:
          name: tools-${{ matrix.os }}
          path: target/release/backup${{ matrix.extra }}
