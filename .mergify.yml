queue_rules:
  - name: duplicated default from merge on approval
    queue_conditions:
      - base=master
      - label~=merge-queue|dependencies
      - "#approved-reviews-by>=1"
      - base=master
      - label~=merge-queue|dependencies
    merge_conditions: []
    merge_method: rebase
    update_method: rebase
  - name: default
    queue_conditions:
      - base=master
      - label~=merge-queue|dependencies
    merge_conditions:
      - "#commits-behind==0"
      - "#approved-reviews-by>=1"
      - "#check-failure==0"
      - check-success=GitGuardian Security Checks
    merge_method: rebase
    update_method: rebase
pull_request_rules:
  - name: Make sure PR are almost up to date before merging
    description: This automatically updates PRs when they are out-of-date with the
      base branch to avoid semantic conflicts (next step is using a merge
      queue).
    conditions:
      - "#commits-behind >= 10"
    actions:
      update:
  - name: Label conflicting pull requests
    description: Add a label to a pull request with conflict to spot it easily
    conditions:
      - conflict
      - -closed
    actions:
      label:
        toggle:
          - conflict
  - name: Add a queue label when PR is queued
    description: Toggle the queue label when a pull request is (un)queued.
    conditions:
      - queue-position >= 0
    actions:
      label:
        toggle:
          - merge-queued
  - name: merge using the merge queue
    conditions:
      - base=master
      - label~=merge-queue|dependencies
    actions:
      request_reviews:
        users:
          - DaRacci
  - name: merge on approval + merge using the merge queue
    conditions: []
    actions:
      queue:
priority_rules:
  - name: priority for queue `duplicated default from merge on approval`
    conditions:
      - "#approved-reviews-by>=1"
    priority: 2750
